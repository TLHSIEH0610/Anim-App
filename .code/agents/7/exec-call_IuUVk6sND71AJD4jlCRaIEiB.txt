===== CHILDBOOK_SETUP.md =====
# üìö Children's Book Creator Setup Guide

This guide will help you set up the complete children's book creation app with Ollama local LLM integration.

## üèóÔ∏è Architecture Overview

Your app now transforms images into complete children's books with the following flow:

1. **User uploads image** + provides prompts and book details
2. **Ollama generates story** based on character and preferences  
3. **ComfyUI creates illustrations** for each page using enhanced prompts
4. **ReportLab assembles PDF** with text and images
5. **User views/shares book** through mobile interface

## üöÄ Quick Start

### 1. Install Ollama (Local LLM)

```bash
# Install Ollama
curl -fsSL https://ollama.ai/install.sh | sh

# Pull a suitable model (choose one)
ollama pull llama3.1:8b      # Recommended - good balance
ollama pull phi3:mini        # Lighter, faster
ollama pull mistral:7b       # Alternative option

# Start Ollama server
ollama serve
```

### 2. Update Docker Environment

```bash
cd infra
cp .env.example .env

# Edit .env to add:
echo "OLLAMA_SERVER=http://host.docker.internal:11434" >> .env
echo "OLLAMA_MODEL=llama3.1:8b" >> .env
```

### 3. Install New Dependencies

```bash
# Backend
cd backend
pip install -r requirements.txt  # Now includes reportlab, jinja2

# Frontend  
cd ../frontend
npm install  # Now includes React Navigation, Picker
```

### 4. Start All Services

```bash
# Terminal 1: Start ComfyUI (local)
cd /path/to/ComfyUI
python main.py --listen

# Terminal 2: Start containerized services
cd infra
docker-compose -f docker-compose.local-comfyui.yml up

# Terminal 3: Start frontend
cd frontend
npm start
```

## üì± New User Experience

### Book Creation Flow:
1. **Upload Image**: User selects character image
2. **Book Details**: Title, theme, age group, page count
3. **Story Elements**: Character description, positive/negative prompts
4. **Review & Create**: Final review before generation

### Creation Process:
- **Story Generation**: Ollama creates age-appropriate narrative
- **Image Creation**: ComfyUI generates themed illustrations  
- **PDF Assembly**: ReportLab combines into professional book
- **Real-time Progress**: WebSocket updates throughout

### Book Management:
- **Library View**: All books with status tracking
- **Interactive Reader**: Page-by-page viewing with navigation
- **PDF Export**: Download/share completed books

## üîß Configuration Options

### Ollama Models

Choose based on your hardware:

```bash
# Light & Fast (4GB RAM)
ollama pull phi3:mini

# Balanced (8GB RAM) - Recommended
ollama pull llama3.1:8b  

# High Quality (16GB+ RAM)
ollama pull llama3.1:70b
```

### ComfyUI Workflows

Theme-specific workflows in `/workflows/`:

- `childbook_adventure.json` - Exciting landscapes, exploration
- `childbook_friendship.json` - Warm interactions, cooperation  
- `childbook_bedtime.json` - Soft colors, calm scenes
- `childbook_fantasy.json` - Magical elements, sparkles

### Environment Variables

```env
# Ollama Configuration
OLLAMA_SERVER=http://host.docker.internal:11434
OLLAMA_MODEL=llama3.1:8b

# Media Storage
MEDIA_ROOT=/data/media

# ComfyUI (existing)
COMFYUI_SERVER=host.docker.internal:8188
```

## üóÑÔ∏è Database Changes

New tables automatically created:

```sql
-- Books table
books: id, user_id, title, theme, target_age, page_count, 
       character_description, positive_prompt, negative_prompt,
       story_data, status, progress_percentage, pdf_path, etc.

-- Book pages table  
book_pages: id, book_id, page_number, text_content, 
            image_description, enhanced_prompt, image_path,
            image_status, etc.
```

## üìö API Endpoints

### New Book Endpoints:

```http
POST /books/create
GET  /books/list
GET  /books/{id}
GET  /books/{id}/status
GET  /books/{id}/preview
GET  /books/{id}/pdf
DELETE /books/{id}
POST /books/{id}/retry
```

## üé® ComfyUI Integration

### Enhanced Prompts

The system automatically enhances user prompts with:

- **Age-appropriate modifiers**: Simple shapes for 3-5, detailed art for 9-12
- **Theme elements**: Adventure landscapes, friendship warmth, etc.
- **Safety filters**: Removes scary/inappropriate content
- **Professional quality**: "children's book illustration, published quality"

### Fallback System

- **Primary**: ComfyUI with theme-specific workflows
- **Fallback**: Placeholder images with book titles when ComfyUI unavailable
- **Graceful degradation**: Stories still generated even if images fail

## üîÑ Job Processing

### Multi-Stage Pipeline:

1. **Creating** (0-10%): Initialize book record
2. **Generating Story** (10-20%): Ollama creates narrative
3. **Generating Images** (20-80%): ComfyUI processes each page
4. **Composing** (80-95%): ReportLab assembles PDF  
5. **Completed** (100%): Book ready for viewing

### Worker Management:

```bash
# Monitor job queue
docker-compose -f docker-compose.local-comfyui.yml logs -f worker

# Scale workers if needed
docker-compose -f docker-compose.local-comfyui.yml up --scale worker=2
```

## üéØ Testing the System

### 1. Test Ollama Connection

```python
# In backend container
python -c "
from app.story_generator import OllamaStoryGenerator
gen = OllamaStoryGenerator()
print('‚úÖ Ollama available:', gen.check_model_availability())
"
```

### 2. Create Test Book

1. Open app and login with mock account
2. Upload a clear photo of a person/character
3. Fill out book creation form:
   - **Title**: "My First Adventure"  
   - **Theme**: Adventure
   - **Age**: 6-8 years
   - **Character**: "A brave young explorer"
   - **Story Elements**: "magical forest, friendly animals"
4. Submit and monitor progress in BookStatus screen

### 3. Check Generated Content

```bash
# View story generation logs
docker logs animapp-worker

# Check created files
ls /data/media/books/
ls /data/media/outputs/
```

## üöÄ Production Deployment

### Scaling Considerations:

1. **Ollama**: Run on dedicated GPU server for better performance
2. **ComfyUI**: Separate GPU-enabled container with model caching
3. **Workers**: Scale based on book creation demand
4. **Storage**: Use S3/cloud storage for generated files
5. **Database**: PostgreSQL with connection pooling

### Environment Updates:

```env
# Production Ollama
OLLAMA_SERVER=https://ollama.yourcompany.com

# Cloud Storage
AWS_S3_BUCKET=childbook-media
AWS_ACCESS_KEY_ID=your-key
AWS_SECRET_ACCESS_KEY=your-secret

# Performance
OLLAMA_NUM_PARALLEL=4
COMFYUI_MAX_WORKERS=2
```

## üé® Customization Options

### Story Themes
Add new themes by:
1. Creating workflow JSON in `/workflows/childbook_[theme].json`
2. Adding theme to `THEMES` array in `BookCreationScreen.tsx`
3. Updating `enhance_childbook_prompt()` function

### Age Groups
Modify age-specific prompts in `story_generator.py`:
```python
age_guidelines = {
    "2-4": {...},  # New toddler category
    "13-16": {...} # New teen category  
}
```

### PDF Styling
Customize book layout in `book_processor.py`:
- Fonts, colors, page layout
- Image sizing and positioning  
- Cover page design

## üêõ Troubleshooting

### Common Issues:

**Ollama not responding:**
```bash
ollama serve
curl http://localhost:11434/api/tags
```

**ComfyUI connection failed:**
```bash
curl http://127.0.0.1:8188/system_stats
```

**Book creation stuck:**
```bash
docker logs animapp-worker
# Check for error messages in logs
```

**Frontend navigation errors:**
```bash
cd frontend
npm install @react-navigation/native @react-navigation/native-stack
npx expo install react-native-screens react-native-safe-area-context
```

## üìä Monitoring & Analytics

Monitor book creation success rates:

```sql
-- Book completion rates
SELECT 
    status, 
    COUNT(*) as count,
    AVG(progress_percentage) as avg_progress
FROM books 
GROUP BY status;

-- Average creation time
SELECT 
    AVG(EXTRACT(EPOCH FROM (completed_at - created_at))/60) as avg_minutes
FROM books 
WHERE status = 'completed';
```

---

## üéâ You're Ready!

Your animation app is now a full-featured children's book creator! Users can upload photos, customize stories, and receive professionally-formatted books with AI-generated content and illustrations.

**Key Features Implemented:**
- ‚úÖ Local LLM story generation with Ollama
- ‚úÖ Enhanced ComfyUI workflows for child-friendly art
- ‚úÖ Professional PDF generation with ReportLab
- ‚úÖ Complete mobile UI with navigation
- ‚úÖ Real-time progress tracking
- ‚úÖ Multi-theme support with safety filters
- ‚úÖ Graceful fallbacks and error handling

The system is production-ready and can scale based on your needs!
===== CROSS_PLATFORM_SETUP.md =====
# AnimApp Cross-Platform Setup Guide

This guide helps you run AnimApp on both **macOS** (development) and **Windows PC** (production).

## üñ•Ô∏è Platform-Specific Paths

### **macOS (Development)**
- **Media Storage**: `~/Documents/AnimApp/media/`
- **Workflows**: `~/Documents/AnimApp/workflows/`
- **Database**: `localhost:5432` (local PostgreSQL)
- **Redis**: `localhost:6379` (local Redis)
- **ComfyUI**: `127.0.0.1:8188` (local ComfyUI)

### **Windows PC (Production)**
- **Media Storage**: `C:\Users\{username}\Documents\AnimApp\media\`
- **Workflows**: `C:\Users\{username}\Documents\AnimApp\workflows\`
- **Database**: `localhost:5432` (local PostgreSQL)
- **Redis**: `localhost:6379` (local Redis)
- **ComfyUI**: `127.0.0.1:8188` (local ComfyUI)

---

## üöÄ Quick Setup

### **Step 1: Auto Setup**
```bash
cd backend
python setup_platform.py
```
This creates all directories and configuration files automatically.

### **Step 2: Install Dependencies**
```bash
pip install -r requirements.txt
```

### **Step 3: Setup Services**

#### **PostgreSQL**
```bash
# macOS (using Homebrew)
brew install postgresql
brew services start postgresql
createdb animapp

# Windows (using installer)
# Download from: https://www.postgresql.org/download/windows/
# Create database: animapp
```

#### **Redis**
```bash
# macOS
brew install redis
brew services start redis

# Windows
# Download from: https://github.com/microsoftarchive/redis/releases
# Or use Docker: docker run -p 6379:6379 redis:alpine
```

#### **ComfyUI Setup**
```bash
# Clone ComfyUI
git clone https://github.com/comfyanonymous/ComfyUI.git
cd ComfyUI

# Install dependencies
pip install -r requirements.txt

# Start with API enabled
python main.py --listen
```

---

## üîß Configuration Files

### **.env File** (auto-generated by setup script)
```env
DATABASE_URL=postgresql://arnie:password@localhost:5432/appdb
REDIS_URL=redis://localhost:6379/0
COMFYUI_SERVER=127.0.0.1:8188
MEDIA_ROOT=~/Documents/AnimApp/media
COMFYUI_WORKFLOW=~/Documents/AnimApp/workflows/image_to_animation.json
```

### **ComfyUI Workflow**
1. Create your image-to-animation workflow in ComfyUI
2. Export as JSON: `Save -> Save (API Format)`
3. Save to: `~/Documents/AnimApp/workflows/image_to_animation.json`

---

## üèÉ‚Äç‚ôÇÔ∏è Running the App

### **Development (macOS)**
```bash
# Terminal 1: Start ComfyUI
cd ComfyUI
python main.py --listen

# Terminal 2: Start Backend
cd backend
uvicorn app.main:app --reload

# Terminal 3: Start Worker
cd backend
python -m rq worker jobs

# Terminal 4: Start Frontend
cd frontend
npm start
```

### **Production (Windows)**
Same commands work on Windows with PowerShell or Command Prompt.

---

## üß™ Testing the Integration

### **1. Upload Test**
- Use the green "Mock Login" button to log in
- Pick an image and upload
- Should see: `‚úÖ Job queued: #1`

### **2. Check Processing**
```bash
# Check job status in database or API
curl http://localhost:8000/jobs/status/1
```

### **3. File Structure Check**
After upload, you should see:
```
~/Documents/AnimApp/media/
‚îú‚îÄ‚îÄ inputs/
‚îÇ   ‚îî‚îÄ‚îÄ uploaded_image.png
‚îî‚îÄ‚îÄ outputs/
    ‚îî‚îÄ‚îÄ animated_uploaded_image.png
```

---

## üîß ComfyUI Integration Steps

### **1. Create Your Workflow**
1. Open ComfyUI web interface
2. Build image-to-animation workflow
3. Test with sample image
4. Save as API format JSON

### **2. Update Workflow Integration**
The `ComfyUIClient` automatically:
- Uploads your image to ComfyUI
- Runs the workflow
- Downloads the result
- Saves to local storage

### **3. Customize for Your Workflow**
Edit `comfyui_client.py` if needed:
- Update `_prepare_workflow()` for your node structure
- Update `_download_result()` for your output format

---

## üêõ Troubleshooting

### **ComfyUI Not Working**
- App falls back to mock processing automatically
- Check ComfyUI is running: `http://127.0.0.1:8188`
- Check workflow file exists and is valid JSON

### **Database Issues**
- Ensure PostgreSQL is running
- Check connection string in `.env`
- Create database if it doesn't exist

### **Path Issues**
- All paths use Python's `pathlib` for cross-platform compatibility
- Check directories exist: `~/Documents/AnimApp/media/`

### **Worker Issues**
```bash
# Check Redis connection
redis-cli ping

# Check RQ worker
python -m rq worker jobs --url redis://localhost:6379/0
```

---

## üîÑ Moving Between Platforms

### **From macOS to Windows**
1. Copy your ComfyUI workflow JSON file
2. Run `python setup_platform.py` on Windows
3. Update database and Redis URLs if needed
4. Install services (PostgreSQL, Redis)

### **Shared Components**
- All Python code is cross-platform
- Database schema is identical
- Frontend works on both platforms
- ComfyUI workflows are portable

---

## üìù Summary

‚úÖ **Cross-platform file paths** using `pathlib`  
‚úÖ **Platform-specific defaults** for directories  
‚úÖ **Automatic fallback** to mock processing  
‚úÖ **Easy setup script** for both platforms  
‚úÖ **Identical functionality** on macOS and Windows  

Your app will work seamlessly on both platforms! üéâ
===== DOCKER_SETUP.md =====
# üê≥ Docker + Local ComfyUI Setup

This setup runs everything in Docker **except** ComfyUI, which runs locally for easier workflow management.

## üöÄ Quick Start

### **1. Set up environment file**
```bash
cd infra
cp .env.example .env
# Edit .env if needed (default values should work)
```

### **2. Start ComfyUI locally** 
```bash
# In a separate terminal, start your local ComfyUI
cd /path/to/your/ComfyUI
python main.py --listen
# Should be available at http://127.0.0.1:8188
```

### **3. Create workflows directory**
```bash
mkdir -p workflows
# Copy your workflow JSON file here:
# workflows/image_to_animation.json
```

### **4. Start all services with Docker**
```bash
cd infra
docker-compose -f docker-compose.local-comfyui.yml up -d
```

### **5. Check everything is running**
```bash
docker-compose -f docker-compose.local-comfyui.yml ps
```

## üìã What runs where:

| Service | Location | URL |
|---------|----------|-----|
| üß† ComfyUI | **Local** | http://127.0.0.1:8188 |
| üöÄ Backend API | Docker | http://localhost:8000 |
| üë∑ Worker | Docker | (background) |
| üóÑÔ∏è PostgreSQL | Docker | localhost:5432 |
| üì¶ Redis | Docker | localhost:6379 |

## üîß Key Configuration

### **.env file settings:**
```env
# This tells containers how to reach your local ComfyUI
COMFYUI_SERVER=host.docker.internal:8188

# Database runs in container
DATABASE_URL=postgresql://animapp:password@db:5432/animapp

# Redis runs in container  
REDIS_URL=redis://redis:6379/0

# Workflows mounted from local directory
COMFYUI_WORKFLOW=/app/workflows/image_to_animation.json
```

### **Network magic:**
- `host.docker.internal:8188` - Containers can reach your local ComfyUI
- `extra_hosts` configuration allows Docker containers to access your host machine

## üèÉ‚Äç‚ôÇÔ∏è Development Workflow

### **Start everything:**
```bash
# Terminal 1: ComfyUI (local)
cd /path/to/ComfyUI  
python main.py --listen

# Terminal 2: Docker services
cd infra
docker-compose -f docker-compose.local-comfyui.yml up
```

### **View logs:**
```bash
# All services
docker-compose -f docker-compose.local-comfyui.yml logs -f

# Just backend
docker-compose -f docker-compose.local-comfyui.yml logs -f backend

# Just worker  
docker-compose -f docker-compose.local-comfyui.yml logs -f worker
```

### **Stop everything:**
```bash
# Stop Docker services
docker-compose -f docker-compose.local-comfyui.yml down

# Stop ComfyUI manually (Ctrl+C)
```

## üß™ Testing the Integration

### **1. Test upload via frontend**
- Use mock login (green button)
- Upload an image
- Check logs: `docker-compose logs -f worker`

### **2. Test ComfyUI connection**
```bash
# From inside backend container
docker exec -it animapp-backend python -c "
import requests
print(requests.get('http://host.docker.internal:8188').status_code)
"
# Should print: 200
```

### **3. Check job processing**
```bash
# View worker logs
docker-compose -f docker-compose.local-comfyui.yml logs -f worker
```

## üéØ Benefits of this approach:

‚úÖ **Easy ComfyUI management** - Use your existing setup  
‚úÖ **Fast iteration** - Change workflows without rebuilding containers  
‚úÖ **Cross-platform** - Works on macOS, Windows, Linux  
‚úÖ **Isolated services** - Database, Redis in containers  
‚úÖ **No conflicts** - Each service in its own container  
‚úÖ **Production ready** - Same setup works everywhere  

## üöö Moving to Production

When ready for production, you can:

1. **Keep this setup** - Run ComfyUI on the same machine
2. **Containerize ComfyUI** - Add it to docker-compose later
3. **Separate machines** - Update `COMFYUI_SERVER` to remote IP

The beauty is your backend code doesn't change! üéâ
===== README.md =====
# üìö Children's Book Creator - AnimApp

A full-stack mobile application that transforms user images into AI-generated children's books with custom stories and illustrations.

## üìã Table of Contents

- [Overview](#overview)
- [Architecture](#architecture)
- [Technology Stack](#technology-stack)
- [Project Structure](#project-structure)
- [Services](#services)
- [Prerequisites](#prerequisites)
- [Quick Start](#quick-start)
- [Development Setup](#development-setup)
- [Docker Setup](#docker-setup)
- [Environment Configuration](#environment-configuration)
- [Running the Application](#running-the-application)
- [API Documentation](#api-documentation)
- [Database Schema](#database-schema)
- [Debugging](#debugging)
- [Workflows](#workflows)
- [Troubleshooting](#troubleshooting)

---

## üéØ Overview

AnimApp is an AI-powered children's book creation platform that enables users to:
- Upload character images
- Generate age-appropriate stories using local LLM (Ollama)
- Create themed illustrations with ComfyUI
- Produce professional PDF books with ReportLab
- Manage and view books through a mobile interface

**Key Features:**
- ‚úÖ Google OAuth authentication
- ‚úÖ AI story generation (Ollama + LLaMA/Phi3/Mistral models)
- ‚úÖ Theme-specific image generation (ComfyUI workflows)
- ‚úÖ Real-time job processing with RQ
- ‚úÖ PDF generation and preview
- ‚úÖ Cross-platform support (macOS, Windows, Linux)
- ‚úÖ Docker containerization

---

## üèóÔ∏è Architecture

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Mobile Client  ‚îÇ (React Native + Expo)
‚îÇ   (Frontend)    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ REST API
         ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   FastAPI       ‚îÇ (Python 3.11)
‚îÇ   Backend       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò
     ‚îÇ   ‚îÇ   ‚îÇ
     ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
     ‚îÇ   ‚îÇ             ‚ñº
     ‚îÇ   ‚îÇ      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
     ‚îÇ   ‚îÇ      ‚îÇ  PostgreSQL  ‚îÇ (User data, Books, Jobs)
     ‚îÇ   ‚îÇ      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
     ‚îÇ   ‚îÇ
     ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
     ‚îÇ              ‚ñº
     ‚îÇ       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
     ‚îÇ       ‚îÇ    Redis    ‚îÇ (Job Queue)
     ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
     ‚îÇ              ‚îÇ
     ‚îÇ              ‚ñº
     ‚îÇ       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
     ‚îÇ       ‚îÇ  RQ Worker  ‚îÇ (Background Processing)
     ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
     ‚îÇ              ‚îÇ
     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
     ‚îÇ              ‚îÇ               ‚îÇ
     ‚ñº              ‚ñº               ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Ollama  ‚îÇ  ‚îÇ ComfyUI  ‚îÇ   ‚îÇ ReportLab  ‚îÇ
‚îÇ  LLM    ‚îÇ  ‚îÇ  Image   ‚îÇ   ‚îÇ    PDF     ‚îÇ
‚îÇ Server  ‚îÇ  ‚îÇ   Gen    ‚îÇ   ‚îÇ  Builder   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Processing Flow:**
1. User uploads image ‚Üí Frontend sends to Backend API
2. Backend creates Book record ‚Üí Queues job in Redis
3. RQ Worker picks up job:
   - Calls Ollama to generate story
   - Sends prompts to ComfyUI for illustrations
   - Assembles PDF with ReportLab
4. User receives real-time progress updates
5. Completed book available for viewing/download

---

## üíª Technology Stack

### Frontend
- **Framework**: React Native 0.79.6
- **UI Library**: Expo ~53.0
- **Navigation**: React Navigation 6.x
- **State Management**: React Context API
- **HTTP Client**: Axios
- **Language**: TypeScript 5.8

### Backend
- **Framework**: FastAPI (Python 3.11)
- **Web Server**: Uvicorn
- **Database ORM**: SQLAlchemy
- **Job Queue**: RQ (Redis Queue)
- **Authentication**: JWT (python-jose)
- **Password Hashing**: Passlib + Bcrypt
- **PDF Generation**: ReportLab
- **HTTP Client**: Requests
- **WebSocket**: websocket-client

### AI & Image Generation
- **LLM**: Ollama (llama3.1:8b, phi3:mini, mistral:7b)
- **Image Generation**: ComfyUI
- **Story Generation**: Custom Ollama integration

### Infrastructure
- **Database**: PostgreSQL 15
- **Cache/Queue**: Redis 7
- **Containerization**: Docker + Docker Compose
- **File Storage**: Local filesystem (media volumes)

### Development Tools
- **API Testing**: FastAPI auto-docs (Swagger/OpenAPI)
- **Linting**: (TypeScript ESLint)
- **Version Control**: Git

---

## üìÅ Project Structure

```
anim-app/
‚îú‚îÄ‚îÄ backend/                    # FastAPI backend service
‚îÇ   ‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.py            # FastAPI entry point
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.py            # JWT authentication & hashing
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ db.py              # SQLAlchemy database session
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models.py          # Database models (User, Job, Book, BookPage)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ schemas.py         # Pydantic validation schemas
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ storage.py         # File upload/deletion utilities
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ queue.py           # RQ job queue management
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ comfyui_client.py  # ComfyUI API client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ story_generator.py # Ollama LLM story generation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ utility.py         # Helper functions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth_routes.py # Login, register, Google OAuth
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ job_routes.py  # Job status endpoints
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ book_routes.py # Book CRUD & creation endpoints
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ worker/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ worker_runner.py   # RQ worker initialization
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ job_process.py     # Simple job processing
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ book_processor.py  # Book creation pipeline
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt       # Python dependencies
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile             # Backend container image
‚îÇ   ‚îú‚îÄ‚îÄ setup_platform.py      # Cross-platform setup script
‚îÇ   ‚îî‚îÄ‚îÄ .env.example           # Environment variables template
‚îÇ
‚îú‚îÄ‚îÄ frontend/                  # React Native mobile app
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ screens/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginScreen.tsx         # Authentication screen
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BookLibraryScreen.tsx   # Book list view
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BookCreationScreen.tsx  # Create new book form
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BookStatusScreen.tsx    # Job progress tracker
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BookViewerScreen.tsx    # Read book interface
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ HomeScreen.tsx          # Legacy home screen
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ client.ts      # Axios HTTP client configuration
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ books.ts       # Book API calls
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jobs.ts        # Job API calls
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ context/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ AuthContext.tsx # Global auth state
‚îÇ   ‚îú‚îÄ‚îÄ assets/                # Images, fonts
‚îÇ   ‚îú‚îÄ‚îÄ App.tsx                # Root component with navigation
‚îÇ   ‚îú‚îÄ‚îÄ package.json           # NPM dependencies
‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json          # TypeScript configuration
‚îÇ   ‚îî‚îÄ‚îÄ .env                   # Frontend environment variables
‚îÇ
‚îú‚îÄ‚îÄ infra/                     # Docker infrastructure
‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.local-comfyui.yml  # Docker services config
‚îÇ   ‚îú‚îÄ‚îÄ monitor.sh             # Container monitoring script
‚îÇ   ‚îî‚îÄ‚îÄ .env                   # Docker environment variables
‚îÇ
‚îú‚îÄ‚îÄ workflows/                 # ComfyUI workflow definitions
‚îÇ   ‚îú‚îÄ‚îÄ Anmi-App.json          # Base animation workflow
‚îÇ   ‚îú‚îÄ‚îÄ childbook_adventure.json    # Adventure theme
‚îÇ   ‚îú‚îÄ‚îÄ childbook_adventure_v2.json
‚îÇ   ‚îú‚îÄ‚îÄ childbook_bedtime.json      # Bedtime theme
‚îÇ   ‚îú‚îÄ‚îÄ childbook_educational.json  # Educational theme
‚îÇ   ‚îú‚îÄ‚îÄ childbook_family.json       # Family theme
‚îÇ   ‚îú‚îÄ‚îÄ childbook_fantasy.json      # Fantasy theme
‚îÇ   ‚îú‚îÄ‚îÄ childbook_friendship.json   # Friendship theme
‚îÇ   ‚îî‚îÄ‚îÄ image_to_animation.json     # Image animation workflow
‚îÇ
‚îú‚îÄ‚îÄ scripts/                   # Utility scripts
‚îÇ   ‚îî‚îÄ‚îÄ cleanup.py             # Delete old files (>3 days)
‚îÇ
‚îú‚îÄ‚îÄ comfyui/                   # ComfyUI installation directory
‚îÇ
‚îú‚îÄ‚îÄ CHILDBOOK_SETUP.md         # Children's book feature guide
‚îú‚îÄ‚îÄ CROSS_PLATFORM_SETUP.md    # macOS/Windows setup instructions
‚îú‚îÄ‚îÄ DOCKER_SETUP.md            # Docker deployment guide
‚îî‚îÄ‚îÄ README.md                  # This file
```

**Code Statistics:**
- Backend Python: ~900 lines
- Frontend TypeScript: ~3,400 lines
- Total Services: 5 (Backend, Worker, Database, Redis, ComfyUI)

---

## üîß Services

### 1. **Backend API** (Port 8000)
- **Technology**: FastAPI + Uvicorn
- **Purpose**: REST API for authentication, books, jobs
- **Database**: PostgreSQL via SQLAlchemy
- **Features**: JWT auth, file uploads, job queuing

### 2. **RQ Worker**
- **Technology**: Redis Queue (RQ)
- **Purpose**: Background job processing
- **Queues**: `jobs`, `books`
- **Tasks**: Story generation, image creation, PDF assembly

### 3. **PostgreSQL Database** (Port 5432)
- **Version**: 15 Alpine
- **Purpose**: Persistent data storage
- **Tables**: users, jobs, books, book_pages

### 4. **Redis** (Port 6379)
- **Version**: 7 Alpine
- **Purpose**: Job queue, caching
- **Persistence**: AOF (Append-Only File)

### 5. **ComfyUI** (Port 8188)
- **Technology**: Python-based image generation UI
- **Purpose**: AI image generation with custom workflows
- **Connection**: HTTP API (`host.docker.internal:8188`)

### 6. **Ollama** (Port 11434)
- **Technology**: Local LLM server
- **Purpose**: Story generation
- **Models**: llama3.1:8b, phi3:mini, mistral:7b
- **Connection**: HTTP API (`host.docker.internal:11434`)

---

## üì¶ Prerequisites

### Required Software

**For Docker Setup:**
- Docker Desktop (macOS/Windows) or Docker Engine (Linux)
- Docker Compose
- ComfyUI (running locally or on GPU server)
- Ollama (running locally or on dedicated server)

**For Local Development:**
- Python 3.11+
- Node.js 18+ & npm
- PostgreSQL 15+
- Redis 7+
- ComfyUI
- Ollama
- Expo CLI

### Hardware Requirements

**Minimum:**
- CPU: 4 cores
- RAM: 8GB
- Storage: 20GB free

**Recommended for AI Generation:**
- CPU: 8+ cores
- RAM: 16GB+
- GPU: NVIDIA with 8GB+ VRAM (for ComfyUI)
- Storage: 50GB+ SSD

---

## üöÄ Quick Start

### Option 1: Docker Setup (Recommended)

```bash
# 1. Install Ollama
curl -fsSL https://ollama.ai/install.sh | sh
ollama pull llama3.1:8b
ollama serve

# 2. Start ComfyUI locally
cd /path/to/ComfyUI
python main.py --listen

# 3. Configure environment
cd anim-app/infra
cp .env.example .env
# Edit .env with your settings

# 4. Start all services
docker-compose -f docker-compose.local-comfyui.yml up -d

# 5. Check services
docker ps
curl http://localhost:8000/health

# 6. Start frontend
cd ../frontend
npm install
npm start
```

### Option 2: Local Development

```bash
# 1. Backend setup
cd backend
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate
pip install -r requirements.txt

# Configure .env
cp .env.example .env
# Edit .env with local PostgreSQL/Redis URLs

# Run setup script
python setup_platform.py

# Start backend
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

# 2. Start worker (new terminal)
cd backend
source venv/bin/activate
rq worker jobs books --url redis://localhost:6379/0

# 3. Frontend setup (new terminal)
cd frontend
npm install
npm start

# 4. Start ComfyUI (new terminal)
cd /path/to/ComfyUI
python main.py --listen

# 5. Start Ollama (new terminal)
ollama serve
```

---

## üõ†Ô∏è Development Setup

### Backend Development

```bash
cd backend

# Create virtual environment
python3.11 -m venv venv
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt

# Setup platform-specific paths
python setup_platform.py

# Create database
createdb animapp

# Configure environment
cp .env.example .env
nano .env  # Edit DATABASE_URL, REDIS_URL, etc.

# Run migrations (auto-creates tables on startup)
uvicorn app.main:app --reload

# Test database connection
curl http://localhost:8000/db-check
```

### Frontend Development

```bash
cd frontend

# Install dependencies
npm install

# Configure API endpoint
echo "EXPO_PUBLIC_API_URL=http://localhost:8000" > .env

# Start Expo dev server
npm start

# Run on specific platform
npm run ios      # iOS simulator
npm run android  # Android emulator
npm run web      # Web browser
```

### Worker Development

```bash
cd backend
source venv/bin/activate

# Start worker with verbose logging
rq worker jobs books \
  --url redis://localhost:6379/0 \
  --worker-ttl 900 \
  --verbose

# Monitor queue
rq info --url redis://localhost:6379/0
```

---

## üê≥ Docker Setup

### Production Deployment

```bash
# 1. Configure environment
cd infra
cp .env.example .env

# Edit production values
nano .env

# 2. Build and start services
docker-compose -f docker-compose.local-comfyui.yml up -d --build

# 3. View logs
docker-compose -f docker-compose.local-comfyui.yml logs -f

# 4. Scale workers (optional)
docker-compose -f docker-compose.local-comfyui.yml up -d --scale worker=3

# 5. Monitor services
./monitor.sh
```

### Docker Commands

```bash
# Stop all services
docker-compose -f docker-compose.local-comfyui.yml down

# Restart specific service
docker-compose -f docker-compose.local-comfyui.yml restart backend

# View service logs
docker logs animapp-backend -f
docker logs animapp-worker -f

# Execute commands in container
docker exec -it animapp-backend bash

# Database access
docker exec -it animapp-db psql -U animapp -d animapp

# Redis CLI
docker exec -it animapp-redis redis-cli
```

---

## ‚öôÔ∏è Environment Configuration

### Backend `.env` (Docker)

```env
# Database
POSTGRES_DB=animapp
POSTGRES_USER=animapp
POSTGRES_PASSWORD=your-secure-password
DATABASE_URL=postgresql://animapp:your-secure-password@db:5432/animapp

# Redis
REDIS_URL=redis://redis:6379/0

# ComfyUI (local)
COMFYUI_SERVER=host.docker.internal:8188

# Ollama
OLLAMA_SERVER=http://host.docker.internal:11434
OLLAMA_MODEL=llama3.1:8b

# Storage
MEDIA_ROOT=/data/media

# Workflows
COMFYUI_WORKFLOW=/app/workflows/Anmi-App.json

# JWT
SECRET_KEY=your-jwt-secret-key-change-in-production
ACCESS_TOKEN_EXPIRE_MINUTES=43200  # 30 days

# Logging
LOG_LEVEL=INFO
```

### Backend `.env` (Local Development)

```env
# Database (local PostgreSQL)
DATABASE_URL=postgresql://arnie:password@localhost:5432/appdb

# Redis (local)
REDIS_URL=redis://localhost:6379/0

# ComfyUI (local)
COMFYUI_SERVER=127.0.0.1:8188

# Ollama (local)
OLLAMA_SERVER=http://localhost:11434
OLLAMA_MODEL=llama3.1:8b

# Storage (platform-specific)
# macOS: ~/Documents/AnimApp/media
# Windows: C:\Users\{username}\Documents\AnimApp\media
MEDIA_ROOT=~/Documents/AnimApp/media

# Workflows
COMFYUI_WORKFLOW=~/Documents/AnimApp/workflows/image_to_animation.json

# JWT
SECRET_KEY=dev-secret-key-change-in-production
ACCESS_TOKEN_EXPIRE_MINUTES=43200
```

### Frontend `.env`

```env
# Backend API endpoint
EXPO_PUBLIC_API_URL=http://localhost:8000

# Google OAuth (optional)
EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID=your-google-client-id
EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID=your-ios-client-id
EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID=your-android-client-id
```

---

## ‚ñ∂Ô∏è Running the Application

### Full Stack (Docker)

```bash
# Terminal 1: Start Ollama
ollama serve

# Terminal 2: Start ComfyUI
cd /path/to/ComfyUI
python main.py --listen

# Terminal 3: Start Docker services
cd anim-app/infra
docker-compose -f docker-compose.local-comfyui.yml up

# Terminal 4: Start frontend
cd anim-app/frontend
npm start
```

### Full Stack (Local)

```bash
# Terminal 1: Start PostgreSQL
brew services start postgresql  # macOS
# or
sudo systemctl start postgresql  # Linux

# Terminal 2: Start Redis
brew services start redis  # macOS
# or
redis-server  # Manual start

# Terminal 3: Start Ollama
ollama serve

# Terminal 4: Start ComfyUI
cd /path/to/ComfyUI
python main.py --listen

# Terminal 5: Start backend
cd anim-app/backend
source venv/bin/activate
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

# Terminal 6: Start worker
cd anim-app/backend
source venv/bin/activate
rq worker jobs books --url redis://localhost:6379/0

# Terminal 7: Start frontend
cd anim-app/frontend
npm start
```

### Access Points

- **Backend API**: http://localhost:8000
- **API Docs**: http://localhost:8000/docs (Swagger UI)
- **ComfyUI**: http://localhost:8188
- **Ollama**: http://localhost:11434
- **Frontend**: Expo Dev Tools (usually http://localhost:19000)
- **PostgreSQL**: localhost:5432
- **Redis**: localhost:6379

---

## üì° API Documentation

### Authentication Endpoints

```http
POST /auth/register
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "securepassword"
}

Response: {
  "access_token": "jwt-token",
  "token_type": "bearer",
  "user": { "id": 1, "email": "user@example.com", "credits": 0 }
}
```

```http
POST /auth/login
Content-Type: application/x-www-form-urlencoded

username=user@example.com&password=securepassword

Response: {
  "access_token": "jwt-token",
  "token_type": "bearer"
}
```

```http
POST /auth/google
Content-Type: application/json

{
  "id_token": "google-id-token"
}
```

```http
GET /auth/me
Authorization: Bearer {jwt-token}

Response: {
  "id": 1,
  "email": "user@example.com",
  "credits": 100,
  "created_at": "2025-01-01T00:00:00Z"
}
```

### Book Endpoints

```http
POST /books/create
Authorization: Bearer {jwt-token}
Content-Type: multipart/form-data

title=My Adventure
theme=adventure
target_age=6-8
page_count=12
character_description=A brave explorer
positive_prompt=magical forest, friendly animals
negative_prompt=scary monsters
file=@character.png

Response: {
  "book_id": 1,
  "status": "creating",
  "message": "Book creation started"
}
```

```http
GET /books/list
Authorization: Bearer {jwt-token}

Response: [
  {
    "id": 1,
    "title": "My Adventure",
    "theme": "adventure",
    "status": "completed",
    "progress_percentage": 100.0,
    "created_at": "2025-01-01T00:00:00Z"
  }
]
```

```http
GET /books/{book_id}
Authorization: Bearer {jwt-token}

Response: {
  "id": 1,
  "title": "My Adventure",
  "theme": "adventure",
  "target_age": "6-8",
  "page_count": 12,
  "status": "completed",
  "pdf_path": "/data/media/books/1/book.pdf",
  "pages": [...]
}
```

```http
GET /books/{book_id}/status
Authorization: Bearer {jwt-token}

Response: {
  "status": "generating_images",
  "progress_percentage": 45.0,
  "message": "Generating page 3 of 12"
}
```

```http
GET /books/{book_id}/pdf
Authorization: Bearer {jwt-token}

Response: PDF file download
```

```http
DELETE /books/{book_id}
Authorization: Bearer {jwt-token}

Response: {
  "message": "Book deleted successfully"
}
```

### Job Endpoints (Legacy)

```http
POST /jobs/upload
Authorization: Bearer {jwt-token}
Content-Type: multipart/form-data

file=@image.png

Response: {
  "job_id": 1,
  "status": "queued"
}
```

```http
GET /jobs/status/{job_id}
Authorization: Bearer {jwt-token}

Response: {
  "id": 1,
  "status": "processing",
  "input_path": "/data/media/inputs/image.png",
  "output_path": "/data/media/outputs/result.mp4",
  "created_at": "2025-01-01T00:00:00Z"
}
```

### Health Endpoints

```http
GET /

Response: {
  "status": "ok",
  "message": "Backend is running!"
}
```

```http
GET /health

Response: {
  "status": "healthy",
  "db": "connected"
}
```

```http
GET /db-check

Response: {
  "db_connected": true
}
```

---

## üóÑÔ∏è Database Schema

### Users Table

```sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    credits INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### Jobs Table (Legacy)

```sql
CREATE TABLE jobs (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    status VARCHAR(32) DEFAULT 'queued',
    input_path TEXT NOT NULL,
    output_path TEXT,
    error TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    started_at TIMESTAMP WITH TIME ZONE,
    finished_at TIMESTAMP WITH TIME ZONE
);
```

### Books Table

```sql
CREATE TABLE books (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    title VARCHAR(255) NOT NULL,
    theme VARCHAR(100),
    target_age VARCHAR(10),
    page_count INTEGER DEFAULT 8,

    character_description TEXT,
    positive_prompt TEXT,
    negative_prompt TEXT,
    original_image_path TEXT,

    story_data TEXT,  -- JSON

    status VARCHAR(32) DEFAULT 'creating',
    progress_percentage FLOAT DEFAULT 0.0,
    error_message TEXT,

    pdf_path TEXT,
    preview_image_path TEXT,

    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    story_generated_at TIMESTAMP WITH TIME ZONE,
    images_completed_at TIMESTAMP WITH TIME ZONE,
    pdf_generated_at TIMESTAMP WITH TIME ZONE,
    completed_at TIMESTAMP WITH TIME ZONE
);
```

### Book Pages Table

```sql
CREATE TABLE book_pages (
    id SERIAL PRIMARY KEY,
    book_id INTEGER REFERENCES books(id) ON DELETE CASCADE,
    page_number INTEGER NOT NULL,

    text_content TEXT NOT NULL,
    image_description TEXT NOT NULL,

    enhanced_prompt TEXT,
    image_path TEXT,
    comfy_job_id VARCHAR(100),

    image_status VARCHAR(32) DEFAULT 'pending',
    image_error TEXT,

    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    image_started_at TIMESTAMP WITH TIME ZONE,
    image_completed_at TIMESTAMP WITH TIME ZONE
);
```

---

## üêõ Debugging

### Backend Debugging

```bash
# Enable debug logging
export LOG_LEVEL=DEBUG
uvicorn app.main:app --reload --log-level debug

# Interactive debugging with breakpoints
# Add to code:
import pdb; pdb.set_trace()

# Check database queries
# Add to db.py:
from sqlalchemy import event
from sqlalchemy.engine import Engine

@event.listens_for(Engine, "before_cursor_execute")
def receive_before_cursor_execute(conn, cursor, statement, params, context, executemany):
    print("SQL:", statement)
    print("Params:", params)
```

### Worker Debugging

```bash
# Run worker with verbose output
rq worker jobs books \
  --url redis://localhost:6379/0 \
  --verbose \
  --worker-ttl 900

# Check failed jobs
rq info --url redis://localhost:6379/0

# Inspect specific job
python -c "
from redis import Redis
from rq import Queue
from rq.job import Job

redis_conn = Redis.from_url('redis://localhost:6379/0')
job = Job.fetch('job-id', connection=redis_conn)
print('Status:', job.get_status())
print('Result:', job.result)
print('Error:', job.exc_info)
"
```

### Frontend Debugging

```bash
# Enable React DevTools
npm install -g react-devtools
react-devtools

# View network requests
# Open Expo DevTools and enable Network tab

# Debug on device
# Shake device ‚Üí "Debug Remote JS"
# Open Chrome ‚Üí http://localhost:19000/debugger-ui

# Console logging
console.log('Debug:', data);

# React Native Debugger
brew install --cask react-native-debugger  # macOS
```

### ComfyUI Debugging

```bash
# Check ComfyUI logs
tail -f /path/to/ComfyUI/comfyui.log

# Test workflow manually
# 1. Open http://localhost:8188
# 2. Load workflow JSON
# 3. Queue prompt
# 4. Check for errors

# API testing
curl http://localhost:8188/system_stats
curl http://localhost:8188/queue
curl http://localhost:8188/history
```

### Ollama Debugging

```bash
# Check Ollama status
ollama list

# Test model
ollama run llama3.1:8b "Hello, world!"

# API testing
curl http://localhost:11434/api/tags
curl http://localhost:11434/api/generate -d '{
  "model": "llama3.1:8b",
  "prompt": "Tell me a story",
  "stream": false
}'

# View logs
journalctl -u ollama -f  # Linux systemd
# or check Ollama server output
```

### Database Debugging

```bash
# Connect to database
psql -U animapp -d animapp

# Useful queries
SELECT * FROM users;
SELECT * FROM books ORDER BY created_at DESC LIMIT 10;
SELECT * FROM book_pages WHERE book_id = 1;

# Check book status
SELECT id, title, status, progress_percentage, error_message
FROM books
WHERE user_id = 1
ORDER BY created_at DESC;

# Check page generation status
SELECT book_id, page_number, image_status, image_error
FROM book_pages
WHERE book_id = 1
ORDER BY page_number;
```

---

## üé® Workflows

### ComfyUI Workflow Files

Located in `/workflows/` directory:

1. **Anmi-App.json** - Base animation workflow
2. **childbook_adventure.json** - Adventure theme (exciting landscapes)
3. **childbook_bedtime.json** - Bedtime theme (soft colors, calm)
4. **childbook_educational.json** - Educational theme
5. **childbook_family.json** - Family theme
6. **childbook_fantasy.json** - Fantasy theme (magical elements)
7. **childbook_friendship.json** - Friendship theme (warm interactions)

### Adding New Workflows

```bash
# 1. Create workflow in ComfyUI UI
# 2. Save as API format: Menu ‚Üí Save ‚Üí API Format
# 3. Save to workflows/childbook_[theme].json

# 4. Update backend code
# Edit backend/app/story_generator.py:
THEMES = [
    "adventure",
    "friendship",
    "bedtime",
    "fantasy",
    "your-new-theme"  # Add here
]

# 5. Update frontend
# Edit frontend/src/screens/BookCreationScreen.tsx:
const THEMES = [
    { label: "Adventure", value: "adventure" },
    { label: "Your New Theme", value: "your-new-theme" }  // Add here
];
```

---

## üîç Troubleshooting

### Common Issues

#### 1. **503 upstream connect error**

**Cause**: ComfyUI or Ollama not accessible from Docker container

**Solution**:
```bash
# Check services are running
curl http://localhost:8188/system_stats  # ComfyUI
curl http://localhost:11434/api/tags     # Ollama

# Verify Docker can reach host
docker exec animapp-backend curl http://host.docker.internal:8188/system_stats

# Update .env if needed
COMFYUI_SERVER=host.docker.internal:8188
OLLAMA_SERVER=http://host.docker.internal:11434
```

#### 2. **Database connection failed**

**Cause**: PostgreSQL not running or wrong credentials

**Solution**:
```bash
# Check PostgreSQL status
brew services list  # macOS
systemctl status postgresql  # Linux

# Test connection
psql -U animapp -d animapp

# Reset password if needed
ALTER USER animapp PASSWORD 'new-password';

# Update .env
DATABASE_URL=postgresql://animapp:new-password@db:5432/animapp
```

#### 3. **Worker not processing jobs**

**Cause**: Redis not running or worker crashed

**Solution**:
```bash
# Check Redis
redis-cli ping  # Should return "PONG"

# Check worker logs
docker logs animapp-worker -f

# Restart worker
docker-compose -f docker-compose.local-comfyui.yml restart worker

# Check queue
rq info --url redis://redis:6379/0
```

#### 4. **Ollama model not found**

**Cause**: Model not downloaded

**Solution**:
```bash
# List available models
ollama list

# Pull required model
ollama pull llama3.1:8b

# Update .env to match
OLLAMA_MODEL=llama3.1:8b
```

#### 5. **Frontend can't connect to backend**

**Cause**: Wrong API URL or CORS issue

**Solution**:
```bash
# Check backend is running
curl http://localhost:8000/health

# Update frontend .env
EXPO_PUBLIC_API_URL=http://localhost:8000

# For mobile device (not localhost)
EXPO_PUBLIC_API_URL=http://192.168.1.100:8000  # Use computer's IP

# Restart Expo
npm start -- --clear
```

#### 6. **Book creation stuck at 0%**

**Cause**: Worker not picking up jobs, Ollama/ComfyUI issues

**Solution**:
```bash
# Check worker logs
docker logs animapp-worker -f

# Check job in database
psql -U animapp -d animapp -c "SELECT * FROM books WHERE id=1;"

# Check Redis queue
docker exec animapp-redis redis-cli LLEN rq:queue:books

# Manually retry
curl -X POST http://localhost:8000/books/1/retry \
  -H "Authorization: Bearer your-token"
```

#### 7. **ComfyUI workflow errors**

**Cause**: Invalid workflow JSON or missing nodes

**Solution**:
```bash
# Validate workflow manually in ComfyUI UI
# 1. Open http://localhost:8188
# 2. Load workflow file
# 3. Check for missing nodes (red)
# 4. Install missing custom nodes

# Check backend logs for workflow errors
docker logs animapp-backend -f | grep -i comfy
```

### Log Locations

```bash
# Docker logs
docker logs animapp-backend -f
docker logs animapp-worker -f
docker logs animapp-db -f
docker logs animapp-redis -f

# Local logs
# Backend: console output
# Worker: console output
# PostgreSQL: /usr/local/var/log/postgres.log (macOS)
# Redis: /usr/local/var/log/redis.log (macOS)
```

### Performance Optimization

```bash
# Scale workers
docker-compose -f docker-compose.local-comfyui.yml up -d --scale worker=3

# Increase Redis memory
# Edit docker-compose file:
redis:
  command: redis-server --appendonly yes --maxmemory 2gb

# Optimize PostgreSQL
# Edit postgresql.conf:
shared_buffers = 256MB
work_mem = 16MB
maintenance_work_mem = 128MB
```

---

## üìö Additional Documentation

- [CHILDBOOK_SETUP.md](./CHILDBOOK_SETUP.md) - Detailed children's book feature setup
- [CROSS_PLATFORM_SETUP.md](./CROSS_PLATFORM_SETUP.md) - macOS/Windows development guide
- [DOCKER_SETUP.md](./DOCKER_SETUP.md) - Production Docker deployment
- [frontend/GOOGLE_AUTH_SETUP.md](./frontend/GOOGLE_AUTH_SETUP.md) - Google OAuth configuration

---

## üìù License

This project is proprietary software. All rights reserved.

---

## üë• Contributing

This is a private project. For issues or feature requests, contact the development team.

---

## üéâ Getting Help

If you encounter issues:

1. Check the [Troubleshooting](#troubleshooting) section
2. Review relevant setup guides in the docs
3. Check Docker/service logs
4. Verify environment variables are correct
5. Test each service independently

**Development Team Contact**: [Your contact info]

---

**Last Updated**: January 2025
**Version**: 1.0.0
**Status**: Production Ready

